define(['handlebars'], function(Handlebars) {
return Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, functionType="function", escapeExpression=this.escapeExpression;


  buffer += "###-begin-";
  if (stack1 = helpers.app_name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.app_name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "-completions-###\n#\n# yargs command completion script\n#\n# Installation: ";
  if (stack1 = helpers.app_path) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.app_path; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " completion >> ~/.bashrc\n#    or ";
  if (stack1 = helpers.app_path) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.app_path; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " completion >> ~/.bash_profile on OSX.\n#\n_yargs_completions()\n{\n    local cur_word args type_list\n\n    cur_word=\"${COMP_WORDS[COMP_CWORD]}\"\n    args=$(printf \"%s \" \"${COMP_WORDS[@]}\")\n\n    # ask yargs to generate completions.\n    type_list=`";
  if (stack1 = helpers.app_path) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.app_path; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + " --get-yargs-completions $args`\n\n    COMPREPLY=( $(compgen -W \"${type_list}\" -- ${cur_word}) )\n    return 0\n}\ncomplete -F _yargs_completions ";
  if (stack1 = helpers.app_name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.app_name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "\n###-end-";
  if (stack1 = helpers.app_name) { stack1 = stack1.call(depth0, {hash:{},data:data}); }
  else { stack1 = depth0.app_name; stack1 = typeof stack1 === functionType ? stack1.apply(depth0) : stack1; }
  buffer += escapeExpression(stack1)
    + "-completions-###\n";
  return buffer;
  })
});